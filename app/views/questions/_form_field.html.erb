<!-- Question form field for learners -->
<%= form_with model: [question, response || Response.new], 
              url: response&.persisted? ? response_path(response) : question_responses_path(question),
              method: response&.persisted? ? :patch : :post,
              local: false,
              data: { auto_save: true },
              class: "question-field response-form",
              id: "response-form-#{question.id}" do |form| %>
<div data-question-id="<%= question.id %>">
  <% case question.question_type %>
  <% when 'free_text' %>
    <div class="response-form">
      <trix-editor input="response-content-<%= question.id %>" 
                   class="trix-content"
                   placeholder="Enter your response here..."></trix-editor>
      <%= form.hidden_field :content, 
                          id: "response-content-#{question.id}",
                          value: response&.content&.to_s&.strip,
                          data: { auto_save: true } %>
    </div>

  <% when 'single_response' %>
    <div class="response-form">
      <%= form.text_area :content,
                       id: "response-content-single-#{question.id}",
                       placeholder: "Enter your response...",
                       class: "w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200 min-h-[100px]",
                       data: { auto_save: true },
                       value: response&.content&.to_s&.strip %>
    </div>

  <% when 'choice' %>
    <div class="space-y-2">
      <% question.options_array.each do |option| %>
        <label class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors duration-200">
          <%= form.radio_button :content, option,
                               class: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300",
                               data: { auto_save: true },
                               checked: response&.content == option %>
          <span class="ml-3 text-gray-700"><%= option %></span>
        </label>
      <% end %>
    </div>

  <% when 'multiple_response' %>
    <div class="space-y-2">
      <% selected_options = response&.content&.to_s&.split(',') || [] %>
      <% question.options_array.each do |option| %>
        <label class="flex items-center">
          <%= check_box_tag "response[content][]", option,
                           selected_options.include?(option),
                           class: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded",
                           data: { auto_save: true } %>
          <span class="ml-2 text-gray-700"><%= option %></span>
        </label>
      <% end %>
    </div>

  <% when 'likert_scale' %>
    <div class="flex justify-between items-center">
      <% question.options_array.each_with_index do |option, index| %>
        <label class="flex flex-col items-center text-center">
          <%= form.radio_button :content, option,
                               class: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 mb-1",
                               data: { auto_save: true },
                               checked: response&.content == option %>
          <span class="text-xs text-gray-600 max-w-20 leading-tight"><%= option %></span>
        </label>
      <% end %>
    </div>

  <% when 'ranking' %>
    <div class="space-y-2">
      <p class="text-sm text-gray-600 mb-2">Drag to reorder, or use the dropdowns to rank these options:</p>
      <% ranked_options = response&.content&.to_s&.split(',') || question.options_array %>
      <div id="ranking-<%= question.id %>" class="space-y-2">
        <% ranked_options.each_with_index do |option, index| %>
          <div class="flex items-center bg-gray-50 p-2 rounded border ranking-item" data-option="<%= option %>">
            <span class="text-sm text-gray-500 mr-2"><%= index + 1 %>.</span>
            <span class="flex-1"><%= option %></span>
            <div class="flex space-x-1">
              <button type="button" onclick="moveUp(this)" class="text-blue-600 hover:text-blue-800 text-sm">â†‘</button>
              <button type="button" onclick="moveDown(this)" class="text-blue-600 hover:text-blue-800 text-sm">â†“</button>
            </div>
          </div>
        <% end %>
      </div>
      <%= form.hidden_field :content,
                          id: "ranking-input-#{question.id}",
                          value: response&.content&.to_s,
                          data: { auto_save: true } %>
    </div>

  <% when 'file_upload' %>
    <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
      <%= form.file_field :content,
                        class: "hidden",
                        id: "file-#{question.id}",
                        data: { question_id: question.id, auto_save: true },
                        accept: ".pdf,.doc,.docx,.jpg,.jpeg,.png,.gif" %>
      <label for="file-<%= question.id %>" class="cursor-pointer">
        <div class="text-gray-400 mb-2">
          <svg class="mx-auto h-12 w-12" stroke="currentColor" fill="none" viewBox="0 0 48 48">
            <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
          </svg>
        </div>
        <span class="text-blue-600 hover:text-blue-500">Click to upload a file</span>
        <p class="text-xs text-gray-500 mt-1">PDF, DOC, DOCX, JPG, PNG, GIF up to 10MB</p>
      </label>
      <% if response&.content.present? %>
        <p class="text-sm text-gray-600 mt-2">Current file: <%= response.content.to_s %></p>
      <% end %>
    </div>

  <% when 'instructional_text' %>
    <!-- Instructional text doesn't need an input field -->
    <div class="bg-blue-50 border border-blue-200 rounded-md p-4">
      <p class="text-blue-800 text-sm">This is informational content. No response required.</p>
    </div>

  <% end %>
</div>
<% end %>

<script>
// Ranking functionality
function moveUp(button) {
  const item = button.closest('.ranking-item');
  const prev = item.previousElementSibling;
  if (prev) {
    item.parentNode.insertBefore(item, prev);
    updateRankingInput(item.closest('[id^="ranking-"]'));
  }
}

function moveDown(button) {
  const item = button.closest('.ranking-item');
  const next = item.nextElementSibling;
  if (next) {
    item.parentNode.insertBefore(next, item);
    updateRankingInput(item.closest('[id^="ranking-"]'));
  }
}

function updateRankingInput(container) {
  const questionId = container.id.split('-')[1];
  const items = container.querySelectorAll('.ranking-item');
  const order = Array.from(items).map(item => item.dataset.option);
  
  const input = document.getElementById(`ranking-input-${questionId}`);
  input.value = order.join(',');
  
  // Trigger auto-save by dispatching input event
  input.dispatchEvent(new Event('input', { bubbles: true }));
  
  // Update position numbers
  items.forEach((item, index) => {
    item.querySelector('span').textContent = `${index + 1}.`;
  });
}

// Ensure Trix editors trigger auto-save
document.addEventListener('trix-change', function(event) {
  // Find the associated hidden input and trigger input event for auto-save
  const trixEditor = event.target;
  const inputId = trixEditor.getAttribute('input');
  const hiddenInput = document.getElementById(inputId);
  
  if (hiddenInput && hiddenInput.hasAttribute('data-auto-save')) {
    hiddenInput.dispatchEvent(new Event('input', { bubbles: true }));
  }
});

// Initialize ranking and Trix functionality
document.addEventListener('DOMContentLoaded', function() {
  console.log('ðŸš€ Journal response system initializing...');
});
</script>