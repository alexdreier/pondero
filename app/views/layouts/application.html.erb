<!DOCTYPE html>
<html class="h-full bg-gray-50" data-theme="light">
  <head>
    <title><%= content_for(:title) || "Pondero by WestEd - Reflective Journaling Platform" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <!-- WestEd Brand Typography -->
    <!-- Note: Neue Haas Grotesk is a commercial font. Using Helvetica/Arial fallbacks for web compatibility -->
    
    <!-- Tailwind CSS CDN for Demo -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Font Awesome Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/trix@2/dist/trix.css">
    <%= javascript_importmap_tags %>

    <!-- WestEd Design System CSS is included via wested_design_system.scss -->
  </head>

  <body class="h-full bg-gray-50">
    <div id="app" class="h-full">
      <% if user_signed_in? %>
        <!-- Sophisticated WestEd Application Shell -->
        <div class="flex h-full">
          <!-- Desktop Navigation -->
          <%= render 'shared/wested_navigation', variant: :desktop, user: current_user %>
          
          <!-- Main Content Area -->
          <div class="flex-1 flex flex-col overflow-hidden">
            <!-- Mobile Navigation Header -->
            <%= render 'shared/wested_navigation', variant: :mobile_header, user: current_user %>
            
            <!-- Page Content -->
            <main class="flex-1 overflow-y-auto">
              <div class="slide-in">
                <%= yield %>
              </div>
            </main>
          </div>
        </div>
        
        <!-- Mobile Sidebar Overlay -->
        <div id="mobile-sidebar-overlay" class="fixed inset-0 z-40 lg:hidden hidden">
          <div class="fixed inset-0 bg-gray-600 bg-opacity-75" id="mobile-sidebar-backdrop"></div>
          <%= render 'shared/wested_navigation', variant: :mobile_overlay, user: current_user %>
        </div>
      <% else %>
        <!-- Authentication Pages -->
        <div class="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50">
          <div class="slide-in">
            <%= yield %>
          </div>
        </div>
      <% end %>
    </div>
    
    <!-- Toast Notifications Container -->
    <div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2"></div>
    
    <!-- Loading Overlay -->
    <div id="loading-overlay" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50 hidden">
      <div class="bg-white rounded-lg p-6 flex items-center space-x-3">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
        <span class="text-gray-900 font-medium">Loading...</span>
      </div>
    </div>
    
    <script>
      // Mobile menu toggle
      document.addEventListener('DOMContentLoaded', function() {
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileOverlay = document.getElementById('mobile-sidebar-overlay');
        const mobileBackdrop = document.getElementById('mobile-sidebar-backdrop');
        const mobileCloseButton = document.getElementById('mobile-sidebar-close');
        
        if (mobileMenuButton && mobileOverlay) {
          mobileMenuButton.addEventListener('click', function() {
            mobileOverlay.classList.toggle('hidden');
          });
          
          mobileBackdrop.addEventListener('click', function() {
            mobileOverlay.classList.add('hidden');
          });
          
          if (mobileCloseButton) {
            mobileCloseButton.addEventListener('click', function() {
              mobileOverlay.classList.add('hidden');
            });
          }
        }
        
        // Dark mode toggle functionality
        const darkModeToggle = document.getElementById('dark-mode-toggle');
        const darkModeToggleDesktop = document.getElementById('dark-mode-toggle-desktop');
        
        function toggleDarkMode() {
          const html = document.documentElement;
          const currentTheme = html.getAttribute('data-theme');
          const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
          html.setAttribute('data-theme', newTheme);
          localStorage.setItem('theme', newTheme);
          
          // Update icon for both toggles
          updateDarkModeIcons(newTheme);
        }
        
        function updateDarkModeIcons(theme) {
          const sunIcon = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"/>`;
          const moonIcon = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"/>`;
          
          const icon = theme === 'dark' ? sunIcon : moonIcon;
          
          if (darkModeToggle) {
            darkModeToggle.querySelector('svg path').setAttribute('d', icon.match(/d="([^"]*)"/)[1]);
          }
          if (darkModeToggleDesktop) {
            darkModeToggleDesktop.querySelector('svg path').setAttribute('d', icon.match(/d="([^"]*)"/)[1]);
          }
        }
        
        if (darkModeToggle) {
          darkModeToggle.addEventListener('click', toggleDarkMode);
        }
        
        if (darkModeToggleDesktop) {
          darkModeToggleDesktop.addEventListener('click', toggleDarkMode);
        }
        
        // Load saved theme
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
        updateDarkModeIcons(savedTheme);
      });
      
      // Toast notification system
      function showToast(message, type = 'info') {
        const container = document.getElementById('toast-container');
        const toast = document.createElement('div');
        
        const bgColor = {
          success: 'bg-green-600',
          error: 'bg-red-600',
          warning: 'bg-yellow-600',
          info: 'bg-blue-600'
        }[type] || 'bg-blue-600';
        
        toast.className = `${bgColor} text-white px-6 py-4 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full opacity-0`;
        // Create elements safely to prevent XSS
        const messageContainer = document.createElement('div');
        messageContainer.className = 'flex items-center justify-between';
        
        const messageSpan = document.createElement('span');
        messageSpan.className = 'font-medium';
        messageSpan.textContent = message; // Use textContent instead of innerHTML
        
        const closeButton = document.createElement('button');
        closeButton.className = 'ml-4 text-white hover:text-gray-200';
        closeButton.onclick = function() { toast.remove(); };
        closeButton.innerHTML = `
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        `;
        
        messageContainer.appendChild(messageSpan);
        messageContainer.appendChild(closeButton);
        toast.appendChild(messageContainer);
        
        container.appendChild(toast);
        
        // Animate in
        setTimeout(() => {
          toast.classList.remove('translate-x-full', 'opacity-0');
        }, 100);
        
        // Auto remove
        setTimeout(() => {
          toast.classList.add('translate-x-full', 'opacity-0');
          setTimeout(() => toast.remove(), 300);
        }, 5000);
      }
      
      // Global loading state
      function showLoading() {
        document.getElementById('loading-overlay').classList.remove('hidden');
      }
      
      function hideLoading() {
        document.getElementById('loading-overlay').classList.add('hidden');
      }
      
      // Enhanced form validation
      document.addEventListener('DOMContentLoaded', function() {
        const forms = document.querySelectorAll('form');
        forms.forEach(form => {
          const inputs = form.querySelectorAll('input, textarea, select');
          inputs.forEach(input => {
            input.addEventListener('blur', validateField);
            input.addEventListener('input', clearFieldError);
          });
        });
      });
      
      function validateField(event) {
        const field = event.target;
        const value = field.value.trim();
        
        // Clear previous errors
        clearFieldError(event);
        
        // Validate required fields
        if (field.hasAttribute('required') && !value) {
          showFieldError(field, 'This field is required');
          return false;
        }
        
        // Validate email fields
        if (field.type === 'email' && value) {
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(value)) {
            showFieldError(field, 'Please enter a valid email address');
            return false;
          }
        }
        
        return true;
      }
      
      function showFieldError(field, message) {
        field.classList.add('form-input-error');
        
        let errorDiv = field.parentNode.querySelector('.field-error');
        if (!errorDiv) {
          errorDiv = document.createElement('div');
          errorDiv.className = 'field-error text-red-600 text-sm mt-1';
          field.parentNode.appendChild(errorDiv);
        }
        errorDiv.textContent = message;
      }
      
      function clearFieldError(event) {
        const field = event.target;
        field.classList.remove('form-input-error');
        
        const errorDiv = field.parentNode.querySelector('.field-error');
        if (errorDiv) {
          errorDiv.remove();
        }
      }
    </script>
  </body>
</html>