<!-- Individual Feedback Message -->
<div class="feedback-message <%= feedback.from_student? ? 'ml-8' : 'mr-8' %>" data-feedback-id="<%= feedback.id %>">
  <div class="<%= feedback.from_student? ? 'bg-gray-100' : 'bg-blue-50' %> rounded-lg p-4 <%= 'ring-2 ring-blue-200' if feedback.from_student? && !feedback.read_by_student %>">
    
    <!-- Message Header -->
    <div class="flex items-start justify-between mb-3">
      <div class="flex items-center">
        <div class="flex items-center">
          <% if feedback.from_student? %>
            <i class="fas fa-user-graduate text-gray-600 mr-2"></i>
          <% else %>
            <i class="fas fa-chalkboard-teacher text-blue-600 mr-2"></i>
          <% end %>
          <span class="font-medium text-gray-900"><%= feedback.user.display_name %></span>
          <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium <%= feedback.from_student? ? 'bg-gray-200 text-gray-800' : 'bg-blue-200 text-blue-800' %>">
            <%= feedback.user.role.humanize %>
          </span>
          
          <% if !feedback.read_by_student && !feedback.from_student? %>
            <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">
              New
            </span>
          <% end %>
        </div>
      </div>
      
      <div class="flex items-center space-x-2">
        <span class="text-xs text-gray-500">
          <%= feedback.created_at.strftime('%B %d, %Y at %I:%M %p') %>
        </span>
        
        <!-- Action dropdown for edit/delete -->
        <% if current_user == feedback.user || current_user.administrator? %>
          <div class="relative inline-block text-left">
            <button type="button" 
                    class="text-gray-400 hover:text-gray-600 p-1"
                    onclick="toggleFeedbackMenu(<%= feedback.id %>)">
              <i class="fas fa-ellipsis-v"></i>
            </button>
            
            <div id="feedback-menu-<%= feedback.id %>" 
                 class="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 hidden z-10">
              <div class="py-1">
                <% if current_user == feedback.user %>
                  <button type="button" 
                          onclick="editFeedback(<%= feedback.id %>)"
                          class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                    <i class="fas fa-edit mr-2"></i>
                    Edit
                  </button>
                <% end %>
                
                <% if current_user.administrator? || (current_user == feedback.user && feedback.created_at > 15.minutes.ago) %>
                  <button type="button" 
                          onclick="deleteFeedback(<%= feedback.id %>, <%= response.id %>)"
                          class="block w-full text-left px-4 py-2 text-sm text-red-700 hover:bg-red-50">
                    <i class="fas fa-trash mr-2"></i>
                    Delete
                  </button>
                <% end %>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>

    <!-- Message Content -->
    <div class="feedback-content text-gray-800 leading-relaxed" id="feedback-content-<%= feedback.id %>">
      <%= simple_format(h(feedback.content), class: "mb-0") %>
    </div>
    
    <!-- Edit Form (Hidden by default) -->
    <div id="feedback-edit-<%= feedback.id %>" class="hidden mt-3">
      <form class="feedback-edit-form" data-feedback-id="<%= feedback.id %>" data-response-id="<%= response.id %>">
        <textarea 
          name="content" 
          rows="3"
          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-sm"
        ><%= feedback.content %></textarea>
        <div class="flex justify-end space-x-2 mt-2">
          <button type="button" 
                  onclick="cancelEditFeedback(<%= feedback.id %>)"
                  class="px-3 py-1 text-sm text-gray-600 hover:text-gray-800">
            Cancel
          </button>
          <button type="submit"
                  class="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700">
            Save
          </button>
        </div>
      </form>
    </div>

    <!-- Reply indicator for threaded conversations -->
    <% if feedback.parent_id.present? %>
      <div class="mt-2 pt-2 border-t border-gray-200">
        <span class="text-xs text-gray-500">
          <i class="fas fa-reply mr-1"></i>
          Reply to previous message
        </span>
      </div>
    <% end %>
  </div>
</div>

<script>
function toggleFeedbackMenu(feedbackId) {
  const menu = document.getElementById(`feedback-menu-${feedbackId}`);
  const allMenus = document.querySelectorAll('[id^="feedback-menu-"]');
  
  // Close all other menus
  allMenus.forEach(m => {
    if (m.id !== `feedback-menu-${feedbackId}`) {
      m.classList.add('hidden');
    }
  });
  
  // Toggle this menu
  menu.classList.toggle('hidden');
}

function editFeedback(feedbackId) {
  // Hide content and show edit form
  document.getElementById(`feedback-content-${feedbackId}`).style.display = 'none';
  document.getElementById(`feedback-edit-${feedbackId}`).classList.remove('hidden');
  
  // Hide menu
  document.getElementById(`feedback-menu-${feedbackId}`).classList.add('hidden');
  
  // Focus on textarea
  document.querySelector(`#feedback-edit-${feedbackId} textarea`).focus();
}

function cancelEditFeedback(feedbackId) {
  // Show content and hide edit form
  document.getElementById(`feedback-content-${feedbackId}`).style.display = 'block';
  document.getElementById(`feedback-edit-${feedbackId}`).classList.add('hidden');
}

function deleteFeedback(feedbackId, responseId) {
  if (!confirm('Are you sure you want to delete this feedback? This action cannot be undone.')) {
    return;
  }
  
  fetch(`/responses/${responseId}/response_feedbacks/${feedbackId}`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.status === 'success') {
      // Remove the message from DOM
      const messageElement = document.querySelector(`[data-feedback-id="${feedbackId}"]`);
      messageElement.remove();
      
      // Update feedback count
      if (data.feedback_count !== undefined) {
        updateFeedbackCount(responseId, data.feedback_count);
      }
      
      showFeedbackMessage('Feedback deleted successfully', 'success');
    } else {
      showFeedbackMessage(data.message || 'Failed to delete feedback', 'error');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    showFeedbackMessage('An error occurred while deleting feedback', 'error');
  });
}

// Handle edit form submissions
document.addEventListener('DOMContentLoaded', function() {
  const editForms = document.querySelectorAll('.feedback-edit-form');
  
  editForms.forEach(form => {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const feedbackId = form.dataset.feedbackId;
      const responseId = form.dataset.responseId;
      const content = form.querySelector('textarea').value.trim();
      
      if (!content) {
        alert('Please enter some content before saving.');
        return;
      }
      
      const submitButton = form.querySelector('button[type="submit"]');
      const originalText = submitButton.innerHTML;
      
      // Show loading state
      submitButton.innerHTML = 'Saving...';
      submitButton.disabled = true;
      
      fetch(`/responses/${responseId}/response_feedbacks/${feedbackId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
        },
        body: JSON.stringify({
          response_feedback: {
            content: content
          }
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === 'success') {
          // Update the displayed content
          const contentDiv = document.getElementById(`feedback-content-${feedbackId}`);
          contentDiv.innerHTML = content.replace(/\n/g, '<br>');
          
          // Hide edit form and show content
          cancelEditFeedback(feedbackId);
          
          showFeedbackMessage('Feedback updated successfully', 'success');
        } else {
          showFeedbackMessage(data.errors ? data.errors.join(', ') : 'Failed to update feedback', 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showFeedbackMessage('An error occurred while updating feedback', 'error');
      })
      .finally(() => {
        // Restore button
        submitButton.innerHTML = originalText;
        submitButton.disabled = false;
      });
    });
  });
});

// Close menus when clicking outside
document.addEventListener('click', function(e) {
  if (!e.target.closest('.relative')) {
    const allMenus = document.querySelectorAll('[id^="feedback-menu-"]');
    allMenus.forEach(menu => menu.classList.add('hidden'));
  }
});
</script>